{"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;AAaD,SAAS,kCAAY,KAA+B,EAAE,GAAiC;IACrF,IAAI,YAAC,QAAQ,eAAE,WAAW,SAAE,KAAK,gBAAE,YAAY,iBAAE,aAAa,EAAE,GAAG,YAAW,GAAG;QAQ1E,iBAAqB;IAN5B,IAAI,YAAyD;QAC3D,GAAG,UAAU;QACb,OAAO,SAAS,OAAO;YAAC,MAAM,KAAK;YAAE,MAAM,GAAG;SAAC,GAAG;QAClD,cAAc,gBAAgB,OAC1B;YAAC,aAAa,KAAK;YAAE,aAAa,GAAG;SAAC,GAEtC;YAAC,CAAA,kBAAA,MAAM,QAAQ,cAAd,6BAAA,kBAAkB;YAAG,CAAA,kBAAA,MAAM,QAAQ,cAAd,6BAAA,kBAAkB;SAAI;QAChD,UAAS,CAAC;YACR,qBAAA,+BAAA,SAAW;gBAAC,OAAO,CAAC,CAAC,EAAE;gBAAE,KAAK,CAAC,CAAC,EAAE;YAAA;QACpC;QACA,aAAY,CAAC;YACX,wBAAA,kCAAA,YAAc;gBAAC,OAAO,CAAC,CAAC,EAAE;gBAAE,KAAK,CAAC,CAAC,EAAE;YAAA;QACvC;QACA,eAAe,gBAAgB,CAAC,CAAC,OAAO,IAAI,GAAK,cAAc;uBAAC;qBAAO;YAAG,KAAK;IACjF;IAEA,IAAI,kBAAkB,CAAA,GAAA,kCAA0B,EAAE,CAAA,GAAA,oDAAW,GAAG;IAChE,IAAI,aAAC,SAAS,EAAC,GAAG,CAAA,GAAA,gBAAQ;IAE1B,qBACE,gCAAC,CAAA,GAAA,yCAAS;QAAG,GAAG,SAAS;QAAE,SAAS;QAA0B,KAAK;OAChE,CAAC,YAAC,QAAQ,YAAE,QAAQ,SAAE,KAAK,EAA2B;QACrD,IAAI,eAAe,cAAc,QAAQ,UAAU;QACnD,qBACE,gFACE,gCAAC;YACC,WAAW,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,wDAAK,GAAG;YAC9B,OAAO;gBAAC,OAAO,CAAC,EAAE,MAAM,eAAe,CAAC,KAAK,IAAI,CAAC,CAAC;YAAA;0BACrD,gCAAC,CAAA,GAAA,yCAAU;YACT,OAAO;YACP,cAAY,gBAAgB,MAAM,CAAC;YACnC,YAAY,MAAM,UAAU;YAC5B,UAAU;YACV,UAAU;YACV,OAAO;YACP,MAAM,MAAM,SAAS;0BACvB,gCAAC;YACC,WAAW,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,wDAAK,GAAG;YAC9B,OAAO;gBACL,CAAC,aAAa,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC,KAAK,IAAI,CAAC,CAAC;gBACpD,OAAO,CAAC,EAAE,KAAK,GAAG,CAAC,MAAM,eAAe,CAAC,KAAK,MAAM,eAAe,CAAC,MAAM,IAAI,CAAC,CAAC;YAClF;0BACF,gCAAC,CAAA,GAAA,yCAAU;YACT,OAAO;YACP,cAAY,gBAAgB,MAAM,CAAC;YACnC,YAAY,MAAM,UAAU;YAC5B,UAAU;YACV,OAAO;YACP,MAAM,MAAM,OAAO;0BACrB,gCAAC;YACC,WAAW,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,wDAAK,GAAG;YAC9B,OAAO;gBACL,OAAO,CAAC,EAAE,AAAC,CAAA,IAAI,MAAM,eAAe,CAAC,EAAC,IAAK,IAAI,CAAC,CAAC;YACnD;;IAGR;AAGN;AAEA;;CAEC,GACD,MAAM,0DAAe,CAAA,GAAA,YAAI,EAAE,UAAU,CAAC","sources":["packages/@react-spectrum/slider/src/RangeSlider.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React from 'react';\nimport {SliderBase, SliderBaseChildArguments, SliderBaseProps} from './SliderBase';\nimport {SliderThumb} from './SliderThumb';\nimport {SpectrumRangeSliderProps} from '@react-types/slider';\nimport styles from '@adobe/spectrum-css-temp/components/slider/vars.css';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\n\nfunction RangeSlider(props: SpectrumRangeSliderProps, ref: FocusableRef<HTMLDivElement>) {\n  let {onChange, onChangeEnd, value, defaultValue, getValueLabel, ...otherProps} = props;\n\n  let baseProps: Omit<SliderBaseProps<number[]>, 'children'> = {\n    ...otherProps,\n    value: value != null ? [value.start, value.end] : undefined,\n    defaultValue: defaultValue != null\n      ? [defaultValue.start, defaultValue.end]\n      // make sure that useSliderState knows we have two handles\n      : [props.minValue ?? 0, props.maxValue ?? 100],\n    onChange(v) {\n      onChange?.({start: v[0], end: v[1]});\n    },\n    onChangeEnd(v) {\n      onChangeEnd?.({start: v[0], end: v[1]});\n    },\n    getValueLabel: getValueLabel ? ([start, end]) => getValueLabel({start, end}) : undefined\n  };\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/slider');\n  let {direction} = useLocale();\n\n  return (\n    <SliderBase {...baseProps} classes={'spectrum-Slider--range'} ref={ref}>\n      {({trackRef, inputRef, state}: SliderBaseChildArguments) => {\n        let cssDirection = direction === 'rtl' ? 'right' : 'left';\n        return (\n          <>\n            <div\n              className={classNames(styles, 'spectrum-Slider-track')}\n              style={{width: `${state.getThumbPercent(0) * 100}%`}} />\n            <SliderThumb\n              index={0}\n              aria-label={stringFormatter.format('minimum')}\n              isDisabled={props.isDisabled}\n              trackRef={trackRef}\n              inputRef={inputRef}\n              state={state}\n              name={props.startName} />\n            <div\n              className={classNames(styles, 'spectrum-Slider-track')}\n              style={{\n                [cssDirection]: `${state.getThumbPercent(0) * 100}%`,\n                width: `${Math.abs(state.getThumbPercent(0) - state.getThumbPercent(1)) * 100}%`\n              }} />\n            <SliderThumb\n              index={1}\n              aria-label={stringFormatter.format('maximum')}\n              isDisabled={props.isDisabled}\n              trackRef={trackRef}\n              state={state}\n              name={props.endName} />\n            <div\n              className={classNames(styles, 'spectrum-Slider-track')}\n              style={{\n                width: `${(1 - state.getThumbPercent(1)) * 100}%`\n              }} />\n          </>\n        );\n      }}\n    </SliderBase>\n  );\n}\n\n/**\n * RangeSliders allow users to quickly select a subset range. They should be used when the upper and lower bounds to the range are invariable.\n */\nconst _RangeSlider = React.forwardRef(RangeSlider);\nexport {_RangeSlider as RangeSlider};\n"],"names":[],"version":3,"file":"RangeSlider.module.js.map"}