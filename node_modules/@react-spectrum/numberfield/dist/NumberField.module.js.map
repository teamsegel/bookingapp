{"mappings":"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","sources":["packages/@react-spectrum/numberfield/src/NumberField.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {classNames, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {Field} from '@react-spectrum/label';\nimport {FocusableRef, RefObject} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport {NumberFieldState, useNumberFieldState} from '@react-stately/numberfield';\nimport React, {HTMLAttributes, InputHTMLAttributes, Ref, useRef} from 'react';\nimport {SpectrumNumberFieldProps} from '@react-types/numberfield';\nimport {StepButton} from './StepButton';\nimport stepperStyle from '@adobe/spectrum-css-temp/components/stepper/vars.css';\nimport {TextFieldBase} from '@react-spectrum/textfield';\nimport {useFormProps} from '@react-spectrum/form';\nimport {useHover} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\nimport {useNumberField} from '@react-aria/numberfield';\nimport {useProvider, useProviderProps} from '@react-spectrum/provider';\n\nfunction NumberField(props: SpectrumNumberFieldProps, ref: FocusableRef<HTMLElement>) {\n  props = useProviderProps(props);\n  props = useFormProps(props);\n  let provider = useProvider();\n  let {\n    isQuiet,\n    isReadOnly,\n    isDisabled,\n    hideStepper\n  } = props;\n\n  let {styleProps: style} = useStyleProps(props);\n\n  let {locale} = useLocale();\n  let state = useNumberFieldState({...props, locale});\n  let inputRef = useRef<HTMLInputElement>(null);\n  let domRef = useFocusableRef<HTMLElement>(ref, inputRef);\n  let {\n    groupProps,\n    labelProps,\n    inputProps,\n    incrementButtonProps,\n    decrementButtonProps,\n    descriptionProps,\n    errorMessageProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  } = useNumberField(props, state, inputRef);\n  let isMobile = provider.scale === 'large';\n  let showStepper = !hideStepper;\n\n  let {isHovered, hoverProps} = useHover({isDisabled});\n\n  let validationState = props.validationState || (isInvalid ? 'invalid' : undefined);\n  let className =\n    classNames(\n      stepperStyle,\n      'spectrum-Stepper',\n      // because FocusRing won't pass along the className from Field, we have to handle that ourselves\n      !props.label && style.className ? style.className : '',\n      {\n        'spectrum-Stepper--isQuiet': isQuiet,\n        'is-disabled': isDisabled,\n        'spectrum-Stepper--readonly': isReadOnly,\n        'is-invalid': validationState === 'invalid' && !isDisabled,\n        'spectrum-Stepper--showStepper': showStepper,\n        'spectrum-Stepper--isMobile': isMobile,\n        'is-hovered': isHovered\n      }\n    );\n\n  return (\n    <Field\n      {...props as Omit<SpectrumNumberFieldProps, 'onChange'>}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      isInvalid={isInvalid}\n      validationErrors={validationErrors}\n      validationDetails={validationDetails}\n      labelProps={labelProps}\n      ref={domRef}\n      wrapperClassName={classNames(\n        stepperStyle,\n        'spectrum-Stepper-container',\n        {\n          'spectrum-Stepper-container--isMobile': isMobile\n        }\n      )}>\n      <NumberFieldInput\n        {...props}\n        groupProps={mergeProps(groupProps, hoverProps)}\n        inputProps={inputProps}\n        inputRef={inputRef}\n        incrementProps={incrementButtonProps}\n        decrementProps={decrementButtonProps}\n        className={className}\n        style={style}\n        state={state}\n        validationState={validationState} />\n    </Field>\n  );\n}\n\n\ninterface NumberFieldInputProps extends SpectrumNumberFieldProps {\n  groupProps: HTMLAttributes<HTMLDivElement>,\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  inputRef: RefObject<HTMLInputElement | HTMLTextAreaElement | null>,\n  incrementProps: AriaButtonProps,\n  decrementProps: AriaButtonProps,\n  className?: string,\n  style?: React.CSSProperties,\n  state: NumberFieldState\n}\n\nconst NumberFieldInput = React.forwardRef(function NumberFieldInput(props: NumberFieldInputProps, ref: Ref<HTMLDivElement>) {\n  let {\n    groupProps,\n    inputProps,\n    inputRef,\n    incrementProps,\n    decrementProps,\n    className,\n    style,\n    autoFocus,\n    isQuiet,\n    isDisabled,\n    hideStepper,\n    validationState,\n    name,\n    state\n  } = props;\n  let showStepper = !hideStepper;\n\n  return (\n    <FocusRing\n      within\n      isTextInput\n      focusClass={classNames(stepperStyle, 'is-focused')}\n      focusRingClass={classNames(stepperStyle, 'focus-ring')}\n      autoFocus={autoFocus}>\n      <div\n        {...groupProps}\n        ref={ref}\n        style={style}\n        className={className}>\n        <TextFieldBase\n          UNSAFE_className={\n            classNames(\n              stepperStyle,\n              'spectrum-Stepper-field'\n            )\n          }\n          inputClassName={\n            classNames(\n              stepperStyle,\n              'spectrum-Stepper-input'\n            )\n          }\n          validationIconClassName={\n            classNames(\n              stepperStyle,\n              'spectrum-Stepper-icon'\n            )\n          }\n          isQuiet={isQuiet}\n          inputRef={inputRef}\n          validationState={validationState}\n          inputProps={inputProps}\n          isDisabled={isDisabled}\n          disableFocusRing />\n        {showStepper &&\n        <>\n          <StepButton direction=\"up\" isQuiet={isQuiet} {...incrementProps} />\n          <StepButton direction=\"down\" isQuiet={isQuiet} {...decrementProps} />\n        </>\n        }\n        {name && <input type=\"hidden\" name={name} value={isNaN(state.numberValue) ? '' : state.numberValue} />}\n      </div>\n    </FocusRing>\n  );\n});\n\n/**\n * NumberFields allow users to enter a number, and increment or decrement the value using stepper buttons.\n */\nlet _NumberField = React.forwardRef(NumberField);\nexport {_NumberField as NumberField};\n"],"names":[],"version":3,"file":"NumberField.module.js.map"}