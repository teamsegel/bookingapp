{"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;AA6BD,SAAS,kCAAY,KAA+B,EAAE,GAAoC;IACxF,IAAI,YAAY,CAAA,GAAA,mBAAK,EAAE;IACvB,IAAI,SAAS,CAAA,GAAA,yCAAc,EAAE;IAC7B,IAAI,UAAU,CAAA,GAAA,2BAAI;IAClB,qBACE,0DAAC,CAAA,GAAA,sCAAc,GAAM,qBACnB,0DAAC,CAAA,GAAA,wCAAY;QAAE,MAAK;QAAU,YAAW;QAAO,WAAW,CAAA,GAAA,sCAAW,EAAE;qBACtE,0DAAC,CAAA,GAAA,iCAAK;QACJ,KAAK;QACL,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;UAkBR;YAAC,MAAM,MAAM,IAAI,IAAI;QAAG;OAC1B,CAAC,kBAAC,cAAc,EAAC,iBAChB,oIACE,0DAAC;YACC,WAAW;;;;;;;;;;;;;cASR;gCAAC;YAAc;yBAClB,0DAAC,CAAA,GAAA,qCAAU;YACT,KAAK;YACL,OAAO,MAAM,KAAK;YAClB,MAAM,MAAM,IAAI;YAChB,UAAU,MAAM,QAAQ;YACxB,cAAY,KAAK,CAAC,aAAa;YAC/B,mBAAiB,KAAK,CAAC,kBAAkB;YACzC,oBAAkB,KAAK,CAAC,mBAAmB;YAC3C,gBAAc,KAAK,CAAC,eAAe;aAEtC,MAAM,KAAK,kBACV,0DAAC;YAAK,IAAI;WAAU,MAAM,KAAK,mBAKvC,0DAAC,CAAA,GAAA,iCAAK;QACJ,mBAAiB,MAAM,KAAK,GAAG,UAAU,KAAK,CAAC,kBAAkB;QACjE,cAAY,KAAK,CAAC,aAAa;QAC/B,cAAc;YACZ,OAAO;YACP,UAAU;YACV,QAAQ,SAAS,sBAAsB;QACzC;qBACA,0DAAC,CAAA,GAAA,gCAAM;QACL,cAAc;YACZ,UAAU;YACV,QAAQ;YACR,SAAS;QACX;OACC,MAAM,QAAQ;AAM3B;AAEA;;CAEC,GACD,IAAI,0DAAe,CAAA,GAAA,sCAAI,EAAE,UAAU,CAAC","sources":["packages/@react-spectrum/color/src/ColorPicker.tsx"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColorPicker as AriaColorPicker, Button, Color} from 'react-aria-components';\nimport {AriaLabelingProps, FocusableRef, ValueBase} from '@react-types/shared';\nimport {ColorSwatch} from './ColorSwatch';\nimport {Content} from '@react-spectrum/view';\nimport {Dialog, DialogTrigger} from '@react-spectrum/dialog';\nimport React, {ReactNode, useRef} from 'react';\nimport {style} from '@react-spectrum/style-macro-s1' with {type: 'macro'};\nimport {unwrapDOMRef, useFocusableRef} from '@react-spectrum/utils';\nimport {useId} from '@react-aria/utils';\n\nexport interface SpectrumColorPickerProps extends ValueBase<string | Color, Color>, AriaLabelingProps {\n  /** A visual label for the color picker. */\n  label?: ReactNode,\n  /** The contents of the color picker popover, e.g. `<ColorEditor />`. */\n  children?: ReactNode,\n  /**\n   * The size of the color swatch.\n   * @default \"M\"\n   */\n  size?: 'XS' | 'S' | 'M' | 'L',\n  /**\n   * The corner rounding of the color swatch.\n   * @default \"default\"\n   */\n  rounding?: 'default' | 'none' | 'full'\n}\n\nfunction ColorPicker(props: SpectrumColorPickerProps, ref: FocusableRef<HTMLButtonElement>) {\n  let swatchRef = useRef(null);\n  let domRef = useFocusableRef(ref);\n  let labelId = useId();\n  return (\n    <AriaColorPicker {...props}>\n      <DialogTrigger type=\"popover\" mobileType=\"tray\" targetRef={unwrapDOMRef(swatchRef)}>\n        <Button \n          ref={domRef}\n          className={style({\n            backgroundColor: 'transparent',\n            borderStyle: 'none',\n            padding: 0,\n            display: 'flex',\n            alignItems: 'center',\n            gap: 'text-to-control',\n            outlineStyle: 'none',\n            fontFamily: 'sans',\n            color: 'body',\n            fontSize: {\n              size: {\n                XS: 'xs',\n                S: 'sm',\n                M: 'base',\n                L: 'lg'\n              }\n            }\n          })({size: props.size || 'M'})}>\n          {({isFocusVisible}) => (\n            <>\n              <div\n                className={style({\n                  outlineStyle: {\n                    default: 'none',\n                    isFocusVisible: 'solid'\n                  },\n                  outlineColor: 'focus-ring',\n                  outlineWidth: 2,\n                  outlineOffset: 2,\n                  borderRadius: 'default'\n                })({isFocusVisible})}>\n                <ColorSwatch\n                  ref={swatchRef}\n                  color={props.value}\n                  size={props.size}\n                  rounding={props.rounding}\n                  aria-label={props['aria-label']}\n                  aria-labelledby={props['aria-labelledby']}\n                  aria-describedby={props['aria-describedby']}\n                  aria-details={props['aria-details']} />\n              </div>\n              {props.label && \n                <span id={labelId}>{props.label}</span>\n              }\n            </>\n          )}\n        </Button>\n        <Dialog \n          aria-labelledby={props.label ? labelId : props['aria-labelledby']}\n          aria-label={props['aria-label']}\n          UNSAFE_style={{\n            width: 'fit-content',\n            minWidth: 0,\n            margin: '0 auto' // Center within tray.\n          }}>\n          <Content \n            UNSAFE_style={{\n              position: 'relative',\n              margin: 'calc(var(--spectrum-dialog-padding) * -1)',\n              padding: 'var(--spectrum-global-dimension-size-200)'\n            }}>\n            {props.children}\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n    </AriaColorPicker>\n  );\n}\n\n/**\n * A ColorPicker combines a swatch with a customizable popover for editing a color.\n */\nlet _ColorPicker = React.forwardRef(ColorPicker);\nexport {_ColorPicker as ColorPicker};\n"],"names":[],"version":3,"file":"ColorPicker.main.js.map"}