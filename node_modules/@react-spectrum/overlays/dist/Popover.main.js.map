{"mappings":"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","sources":["packages/@react-spectrum/overlays/src/Popover.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaPopoverProps, DismissButton, PopoverAria, usePopover} from '@react-aria/overlays';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef, RefObject, StyleProps} from '@react-types/shared';\nimport {FocusWithinProps, useFocusWithin} from '@react-aria/interactions';\nimport {mergeProps, useLayoutEffect} from '@react-aria/utils';\nimport {Overlay} from './Overlay';\nimport {OverlayTriggerState} from '@react-stately/overlays';\nimport overrideStyles from './overlays.css';\nimport React, {forwardRef, MutableRefObject, ReactNode, useRef, useState} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/popover/vars.css';\nimport {Underlay} from './Underlay';\n\ninterface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef' | 'maxHeight'>, FocusWithinProps, StyleProps {\n  children: ReactNode,\n  hideArrow?: boolean,\n  state: OverlayTriggerState,\n  shouldContainFocus?: boolean,\n  onEntering?: () => void,\n  onEnter?: () => void,\n  onEntered?: () => void,\n  onExiting?: () => void,\n  onExited?: () => void,\n  onExit?: () => void,\n  container?: HTMLElement,\n  disableFocusManagement?: boolean,\n  enableBothDismissButtons?: boolean,\n  onDismissButtonPress?: () => void\n}\n\ninterface PopoverWrapperProps extends PopoverProps, FocusWithinProps {\n  isOpen?: boolean,\n  wrapperRef: MutableRefObject<HTMLDivElement>\n}\n\ninterface ArrowProps {\n  arrowProps: PopoverAria['arrowProps'],\n  isLandscape: boolean,\n  arrowRef?: RefObject<SVGSVGElement | null>,\n  primary: number,\n  secondary: number,\n  borderDiagonal: number\n}\n\n/**\n * Arrow placement can be done pointing right or down because those paths start at 0, x or y. Because the\n * other two don't, they start at a fractional pixel value, it introduces rounding differences between browsers and\n * between display types (retina with subpixels vs not retina). By flipping them with CSS we can ensure that\n * the path always starts at 0 so that it perfectly overlaps the popover's border.\n * See bottom of file for more explanation.\n */\nlet arrowPlacement = {\n  left: 'right',\n  right: 'right',\n  top: 'bottom',\n  bottom: 'bottom'\n};\n\nfunction Popover(props: PopoverProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    children,\n    state,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let wrapperRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <Overlay {...otherProps} isOpen={state.isOpen} nodeRef={wrapperRef}>\n      <PopoverWrapper ref={domRef} {...props} wrapperRef={wrapperRef}>\n        {children}\n      </PopoverWrapper>\n    </Overlay>\n  );\n}\n\nconst PopoverWrapper = forwardRef((props: PopoverWrapperProps, ref: RefObject<HTMLDivElement | null>) => {\n  let {\n    children,\n    isOpen,\n    hideArrow,\n    isNonModal,\n    enableBothDismissButtons,\n    state,\n    wrapperRef,\n    onDismissButtonPress = () => state.close()\n  } = props;\n  let {styleProps} = useStyleProps(props);\n\n  let {size, borderWidth, arrowRef} = useArrowSize();\n  const borderRadius = usePopoverBorderRadius(ref);\n  let borderDiagonal = borderWidth * Math.SQRT2;\n  let primary = size + borderDiagonal;\n  let secondary = primary * 2;\n  let {\n    popoverProps,\n    arrowProps,\n    underlayProps,\n    placement\n  } = usePopover({\n    ...props,\n    popoverRef: ref,\n    maxHeight: null,\n    arrowSize: hideArrow ? 0 : secondary,\n    arrowBoundaryOffset: borderRadius\n  }, state);\n  let {focusWithinProps} = useFocusWithin(props);\n\n  // Attach Transition's nodeRef to outermost wrapper for node.reflow: https://github.com/reactjs/react-transition-group/blob/c89f807067b32eea6f68fd6c622190d88ced82e2/src/Transition.js#L231\n  return (\n    <div ref={wrapperRef}>\n      {!isNonModal && <Underlay isTransparent {...mergeProps(underlayProps)} isOpen={isOpen} /> }\n      <div\n        {...styleProps}\n        {...mergeProps(popoverProps, focusWithinProps)}\n        style={{\n          ...styleProps.style,\n          ...popoverProps.style\n        }}\n        ref={ref}\n        className={\n          classNames(\n            styles,\n            'spectrum-Popover',\n            `spectrum-Popover--${placement}`,\n            {\n              'spectrum-Popover--withTip': !hideArrow,\n              'is-open': isOpen,\n              [`is-open--${placement}`]: isOpen\n            },\n            classNames(\n              overrideStyles,\n              'spectrum-Popover',\n              'react-spectrum-Popover'\n            ),\n            styleProps.className\n          )\n        }\n        role=\"presentation\"\n        data-testid=\"popover\">\n        {(!isNonModal || enableBothDismissButtons) && <DismissButton onDismiss={onDismissButtonPress} />}\n        {children}\n        {hideArrow ? null : (\n          <Arrow\n            arrowProps={arrowProps}\n            isLandscape={arrowPlacement[placement] === 'bottom'}\n            arrowRef={arrowRef}\n            primary={primary}\n            secondary={secondary}\n            borderDiagonal={borderDiagonal} />\n        )}\n        <DismissButton onDismiss={onDismissButtonPress} />\n      </div>\n    </div>\n  );\n});\n\nfunction usePopoverBorderRadius(popoverRef: RefObject<HTMLDivElement | null>) {\n  let [borderRadius, setBorderRadius] = useState(0);\n  useLayoutEffect(() => {\n    if (popoverRef.current) {\n      let spectrumBorderRadius = window.getComputedStyle(popoverRef.current).borderRadius;\n      if (spectrumBorderRadius !== '') {\n        setBorderRadius(parseInt(spectrumBorderRadius, 10));\n      }\n    }\n  }, [popoverRef]);\n  return borderRadius;\n}\n\nfunction useArrowSize() {\n  let [size, setSize] = useState(20);\n  let [borderWidth, setBorderWidth] = useState(1);\n  let arrowRef = useRef<SVGSVGElement>(null);\n  // get the css value for the tip size and divide it by 2 for this arrow implementation\n  useLayoutEffect(() => {\n    if (arrowRef.current) {\n      let spectrumTipWidth = window.getComputedStyle(arrowRef.current)\n        .getPropertyValue('--spectrum-popover-tip-size');\n      if (spectrumTipWidth !== '') {\n        setSize(parseInt(spectrumTipWidth, 10) / 2);\n      }\n\n      let spectrumBorderWidth = window.getComputedStyle(arrowRef.current)\n        .getPropertyValue('--spectrum-popover-tip-borderWidth');\n      if (spectrumBorderWidth !== '') {\n        setBorderWidth(parseInt(spectrumBorderWidth, 10));\n      }\n    }\n  }, []);\n  return {size, borderWidth, arrowRef};\n}\n\nfunction Arrow(props: ArrowProps) {\n  let {primary, secondary, isLandscape, arrowProps, borderDiagonal, arrowRef} = props;\n  let halfBorderDiagonal = borderDiagonal / 2;\n\n  let primaryStart = 0;\n  let primaryEnd = primary - halfBorderDiagonal;\n\n  let secondaryStart = halfBorderDiagonal;\n  let secondaryMiddle = secondary / 2;\n  let secondaryEnd = secondary - halfBorderDiagonal;\n\n  let pathData = isLandscape ? [\n    'M', secondaryStart, primaryStart,\n    'L', secondaryMiddle, primaryEnd,\n    'L', secondaryEnd, primaryStart\n  ] : [\n    'M', primaryStart, secondaryStart,\n    'L', primaryEnd, secondaryMiddle,\n    'L', primaryStart, secondaryEnd\n  ];\n\n  /* use ceil because the svg needs to always accommodate the path inside it */\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/svg/2000\"\n      width={Math.ceil(isLandscape ? secondary : primary)}\n      height={Math.ceil(isLandscape ? primary : secondary)}\n      className={classNames(styles, 'spectrum-Popover-tip')}\n      ref={arrowRef}\n      {...arrowProps}>\n      <path className={classNames(styles, 'spectrum-Popover-tip-triangle')} d={pathData.join(' ')} />\n    </svg>\n  );\n}\n\nlet _Popover = forwardRef(Popover);\nexport {_Popover as Popover};\n\n/**\n * More explanation on popover tips.\n * - I tried changing the calculation of the popover placement in an effort to get it squarely onto the pixel grid.\n * This did not work because the problem was in the svg partial pixel end of the path in the popover right and popover bottom.\n * - I tried creating an extra 'bandaid' path that matched the background color and would overlap the popover border.\n * This didn't work because the border on the svg triangle didn't extend all the way to match nicely with the popover border.\n * - I tried getting the client bounding box and setting the svg to that partial pixel value\n * This didn't work because again the issue was inside the svg\n * - I didn't try drawing the svg backwards\n * This could still be tried\n * - I tried changing the calculation of the popover placement AND the svg height/width so that they were all rounded\n * This seems to have done the trick.\n */\n"],"names":[],"version":3,"file":"Popover.main.js.map"}