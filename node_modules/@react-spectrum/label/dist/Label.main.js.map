{"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;AAcD,SAAS,4BAAM,KAAyB,EAAE,GAA6B;IACrE,QAAQ,CAAA,GAAA,6CAAe,EAAE;IACzB,IAAI,YACF,QAAQ,iBACR,gBAAgB,mBAChB,aAAa,kBAAkB,SAAS,UAAU,kBAClD,UAAU,sBACV,qBAAqB,cAAc,OAAO,SAAS,oDACnD,+CAA+C,gBAC/C,OAAO,EACP,KAAK,QAAQ,EACb,aAAa,cAAc,OAAO,WAClC,OAAO,EACP,GAAG,YACJ,GAAG;IAEJ,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IACvB,IAAI,cAAC,UAAU,EAAC,GAAG,CAAA,GAAA,uCAAY,EAAE;IAEjC,IAAI,kBAAkB,CAAA,GAAA,gDAA0B,EAAE,CAAA,GAAA,mDAAW,GAAG;IAChE,IAAI,iBAAiB,aAAa,gBAAgB,MAAM,CAAC,gBAAgB,gBAAgB,MAAM,CAAC;IAChG,IAAI,qBACF,0DAAC,CAAA,GAAA,wDAAO;QACN,kBAAkB,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;QACrC,cAAY,+CAA+C,gBAAgB,MAAM,CAAC,gBAAgB;;IAGtG,IAAI,kBAAkB,CAAA,GAAA,oCAAS,EAC7B,CAAA,GAAA,mDAAK,GACL,uBACA;QACE,qCAAqC,kBAAkB;QACvD,iCAAiC,eAAe;IAClD,GACA,WAAW,SAAS;IAGtB,qBACE,0DAAC;QACE,GAAG,CAAA,GAAA,oCAAa,EAAE,WAAW;QAC7B,GAAG,UAAU;QACd,SAAS;QACT,KAAK;QACL,WAAW;QACX,SAAS,gBAAgB,UAAU,YAAY,UAAU;OACxD,UACA,AAAC,CAAA,uBAAuB,WAAY,uBAAuB,UAAU,UAAU,KAAM,WAIrF,uBAAuB,yBAAW,0DAAC;QAAK,eAAa,CAAC,+CAA+C,aAAa;OAAY,iBAC9H,uBAAuB,UAAU,cAAc;AAGtD;AAEA,IAAI,0DAAS,CAAA,GAAA,sCAAI,EAAE,UAAU,CAAC","sources":["packages/@react-spectrum/label/src/Label.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport Asterisk from '@spectrum-icons/ui/Asterisk';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React from 'react';\nimport {SpectrumLabelProps} from '@react-types/label';\nimport styles from '@adobe/spectrum-css-temp/components/fieldlabel/vars.css';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction Label(props: SpectrumLabelProps, ref: DOMRef<HTMLLabelElement>) {\n  props = useProviderProps(props);\n  let {\n    children,\n    labelPosition = 'top',\n    labelAlign = labelPosition === 'side' ? 'start' : null,\n    isRequired,\n    necessityIndicator = isRequired != null ? 'icon' : null,\n    includeNecessityIndicatorInAccessibilityName = false,\n    htmlFor,\n    for: labelFor,\n    elementType: ElementType = 'label',\n    onClick,\n    ...otherProps\n  } = props;\n\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/label');\n  let necessityLabel = isRequired ? stringFormatter.format('(required)') : stringFormatter.format('(optional)');\n  let icon = (\n    <Asterisk\n      UNSAFE_className={classNames(styles, 'spectrum-FieldLabel-requiredIcon')}\n      aria-label={includeNecessityIndicatorInAccessibilityName ? stringFormatter.format('(required)') : undefined} />\n  );\n\n  let labelClassNames = classNames(\n    styles,\n    'spectrum-FieldLabel',\n    {\n      'spectrum-FieldLabel--positionSide': labelPosition === 'side',\n      'spectrum-FieldLabel--alignEnd': labelAlign === 'end'\n    },\n    styleProps.className\n  );\n\n  return (\n    <ElementType\n      {...filterDOMProps(otherProps)}\n      {...styleProps}\n      onClick={onClick}\n      ref={domRef}\n      className={labelClassNames}\n      htmlFor={ElementType === 'label' ? labelFor || htmlFor : undefined}>\n      {children}\n      {(necessityIndicator === 'label' || (necessityIndicator === 'icon' && isRequired)) && ' \\u200b'}\n      {/* necessityLabel is hidden to screen readers if the field is required because\n        * aria-required is set on the field in that case. That will already be announced,\n        * so no need to duplicate it here. If optional, we do want it to be announced here. */}\n      {necessityIndicator === 'label' && <span aria-hidden={!includeNecessityIndicatorInAccessibilityName ? isRequired : undefined}>{necessityLabel}</span>}\n      {necessityIndicator === 'icon' && isRequired && icon}\n    </ElementType>\n  );\n}\n\nlet _Label = React.forwardRef(Label);\nexport {_Label as Label};\n"],"names":[],"version":3,"file":"Label.main.js.map"}