{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;;;;;AAiCD,IAAI,8BAAQ;IACV,MAAM,CAAA,GAAA,0DAAS;IACf,UAAU,CAAA,GAAA,6DAAY;IACtB,QAAQ,CAAA,GAAA,2DAAU;IAClB,UAAU,CAAA,GAAA,2DAAU;AACtB;AAEA,SAAS,kCAAY,KAA+B,EAAE,GAA2B;IAC/E,QAAQ,CAAA,GAAA,6CAAe,EAAE;IACzB,IAAI,YACF,QAAQ,WACR,UAAU,sBACV,SAAS,EACT,GAAG,YACJ,GAAG;IAEJ,IAAI,cAAC,UAAU,EAAC,GAAG,CAAA,GAAA,uCAAY,EAAE;IACjC,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IAEvB,IAAI,QAAQ;QACV,SAAS;YAAC,kBAAkB,CAAA,GAAA,mDAAK,CAAC,CAAC,+BAA+B;QAAA;QAClE,SAAS;YAAC,kBAAkB,CAAA,GAAA,mDAAK,CAAC,CAAC,+BAA+B;QAAA;IACpE;IAEA,IAAI,kBAAkB,CAAA,GAAA,gDAA0B,EAAE,CAAA,GAAA,mDAAW,GAAG;IAChE,IAAI,OAAsC;IAC1C,IAAI,UAAkB;IACtB,IAAI,WAAW,6BAAO;QACpB,OAAO,2BAAK,CAAC,QAAQ;QACrB,UAAU,gBAAgB,MAAM,CAAC;IACnC;IAEA,IAAI,eAAe,CAAA,GAAA,mBAAK,EAAE,MAAM,SAAS;IACzC,CAAA,GAAA,sBAAQ,EAAE;QACR,IAAI,aAAa,OAAO,IAAI,OAAO,OAAO,EACxC,OAAO,OAAO,CAAC,KAAK;QAEtB,aAAa,OAAO,GAAG;IACzB,GAAG;QAAC;KAAO;IAEX,qBACE,0DAAC,CAAA,GAAA,+BAAQ;QAAE,gBAAgB,CAAA,GAAA,mDAAK,CAAC,CAAC,aAAa;qBAC7C,0DAAC;QACE,GAAG,CAAA,GAAA,oCAAa,EAAE,MAAM;QACxB,GAAG,UAAU;QACd,KAAK;QACL,UAAU,YAAY,KAAK;QAC3B,WAAW;QACX,WAAW,CAAA,GAAA,oCAAS,EAClB,CAAA,GAAA,mDAAK,GACL,wBACA,CAAC,sBAAsB,EAAE,QAAQ,CAAC,EAClC,WAAW,SAAS;QAEtB,MAAK;qBACL,0DAAC,CAAA,GAAA,+BAAG;QAAE,kBAAkB,CAAA,GAAA,mDAAK,CAAC,CAAC,4BAA4B;qBACzD,0DAAC,CAAA,GAAA,sCAAW;QAAE,OAAO;OAClB,sBAAQ,0DAAC;QAAK,kBAAkB,CAAA,GAAA,mDAAK,CAAC,CAAC,4BAA4B;QAAE,cAAY;QACjF;AAMb;AAEA;;;CAGC,GACD,MAAM,0DAAe,CAAA,GAAA,sCAAI,EAAE,UAAU,CAAC","sources":["packages/@react-spectrum/inlinealert/src/InlineAlert.tsx"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport {classNames, SlotProvider, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMProps, DOMRef, StyleProps} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {FocusRing} from '@react-aria/focus';\nimport {Grid} from '@react-spectrum/layout';\nimport InfoMedium from '@spectrum-icons/ui/InfoMedium';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {ReactNode, useEffect, useRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/inlinealert/vars.css';\nimport SuccessMedium from '@spectrum-icons/ui/SuccessMedium';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nexport interface SpectrumInlineAlertProps extends DOMProps, StyleProps {\n  /**\n   * The [visual style](https://spectrum.adobe.com/page/in-line-alert/#Options) of the Inline Alert.\n   * @default 'neutral'\n   */\n  variant?: 'neutral' | 'info' | 'positive' | 'notice' | 'negative',\n  /**\n   * The contents of the Inline Alert.\n   */\n  children: ReactNode,\n  /**\n   * Whether to automatically focus the Inline Alert when it first renders.\n   */\n  autoFocus?: boolean\n}\n\nlet ICONS = {\n  info: InfoMedium,\n  positive: SuccessMedium,\n  notice: AlertMedium,\n  negative: AlertMedium\n};\n\nfunction InlineAlert(props: SpectrumInlineAlertProps, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let {\n    children,\n    variant = 'neutral',\n    autoFocus,\n    ...otherProps\n  } = props;\n\n  let {styleProps} = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n\n  let slots = {\n    heading: {UNSAFE_className: styles['spectrum-InLineAlert-heading']},\n    content: {UNSAFE_className: styles['spectrum-InLineAlert-content']}\n  };\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/inlinealert');\n  let Icon: typeof React.Component | null = null;\n  let iconAlt: string = '';\n  if (variant in ICONS) {\n    Icon = ICONS[variant];\n    iconAlt = stringFormatter.format(variant);\n  }\n\n  let autoFocusRef = useRef(props.autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      domRef.current.focus();\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return (\n    <FocusRing focusRingClass={styles['focus-ring']}>\n      <div\n        {...filterDOMProps(props)}\n        {...styleProps}\n        ref={domRef}\n        tabIndex={autoFocus ? -1 : undefined}\n        autoFocus={autoFocus}\n        className={classNames(\n          styles,\n          'spectrum-InLineAlert',\n          `spectrum-InLineAlert--${variant}`,\n          styleProps.className\n        )}\n        role=\"alert\">\n        <Grid UNSAFE_className={styles['spectrum-InLineAlert-grid']}>\n          <SlotProvider slots={slots}>\n            {Icon && <Icon UNSAFE_className={styles['spectrum-InLineAlert-icon']} aria-label={iconAlt} />}\n            {children}\n          </SlotProvider>\n        </Grid>\n      </div>\n    </FocusRing>\n  );\n}\n\n/**\n * Inline alerts display a non-modal message associated with objects in a view.\n * These are often used in form validation, providing a place to aggregate feedback related to multiple fields.\n */\nconst _InlineAlert = React.forwardRef(InlineAlert);\nexport {_InlineAlert as InlineAlert};\n"],"names":[],"version":3,"file":"InlineAlert.main.js.map"}