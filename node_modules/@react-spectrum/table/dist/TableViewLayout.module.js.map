{"mappings":"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","sources":["packages/@react-spectrum/table/src/TableViewLayout.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {DropTarget} from '@react-types/shared';\nimport {GridNode} from '@react-types/grid';\nimport {LayoutInfo, Rect} from '@react-stately/virtualizer';\nimport {LayoutNode, TableLayout} from '@react-stately/layout';\n\nexport class TableViewLayout<T> extends TableLayout<T> {\n  private isLoading: boolean = false;\n\n  protected buildCollection(): LayoutNode[] {\n    let loadingState = this.collection.body.props.loadingState;\n    this.isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n    return super.buildCollection();\n  }\n\n  protected buildColumn(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let res = super.buildColumn(node, x, y);\n    res.layoutInfo.allowOverflow = true; // for resizer nubbin\n    return res;\n  }\n\n  protected buildBody(): LayoutNode {\n    let node = super.buildBody(0);\n    let {children, layoutInfo} = node;\n    let width = node.layoutInfo.rect.width;\n\n    if (this.isLoading) {\n      // Add some margin around the loader to ensure that scrollbars don't flicker in and out.\n      let rect = new Rect(40, children.length === 0 ? 40 : layoutInfo.rect.maxY, (width || this.virtualizer.visibleRect.width) - 80, children.length === 0 ? this.virtualizer.visibleRect.height - 80 : 60);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      loader.parentKey = layoutInfo.key;\n      loader.isSticky = children.length === 0;\n      let node = {\n        layoutInfo: loader,\n        validRect: loader.rect\n      };\n      children.push(node);\n      this.layoutNodes.set(loader.key, node);\n      layoutInfo.rect.height = loader.rect.maxY;\n      width = Math.max(width, rect.width);\n    } else if (children.length === 0) {\n      let rect = new Rect(40, 40, this.virtualizer.visibleRect.width - 80, this.virtualizer.visibleRect.height - 80);\n      let empty = new LayoutInfo('empty', 'empty', rect);\n      empty.parentKey = layoutInfo.key;\n      empty.isSticky = true;\n      let node = {\n        layoutInfo: empty,\n        validRect: empty.rect\n      };\n      children.push(node);\n      layoutInfo.rect.height = empty.rect.maxY;\n      width = Math.max(width, rect.width);\n    }\n\n    return node;\n  }\n\n  protected buildRow(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let res = super.buildRow(node, x, y);\n    res.layoutInfo.rect.height += 1; // for bottom border\n    return res;\n  }\n\n  protected buildCell(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let res = super.buildCell(node, x, y);\n    if (node.column?.props.hideHeader) {\n      res.layoutInfo.allowOverflow = true;\n    }\n    return res;\n  }\n\n  protected getEstimatedRowHeight(): number {\n    return super.getEstimatedRowHeight() + 1; // for bottom border\n  }\n\n  protected isStickyColumn(node: GridNode<T>) {\n    return node.props?.isDragButtonCell || node.props?.isSelectionCell;\n  }\n\n  getDropTargetFromPoint(x: number, y: number, isValidDropTarget: (target: DropTarget) => boolean): DropTarget {\n    // Offset for height of header row\n    y -= this.virtualizer.layout.getVisibleLayoutInfos(new Rect(x, y, 1, 1)).find(info => info.type === 'headerrow')?.rect.height;\n    return super.getDropTargetFromPoint(x, y, isValidDropTarget);\n  }\n}\n"],"names":[],"version":3,"file":"TableViewLayout.module.js.map"}