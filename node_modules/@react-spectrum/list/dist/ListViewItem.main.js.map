{"mappings":"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","sources":["packages/@react-spectrum/list/src/ListViewItem.tsx"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {Checkbox} from '@react-spectrum/checkbox';\nimport ChevronLeftMedium from '@spectrum-icons/ui/ChevronLeftMedium';\nimport ChevronRightMedium from '@spectrum-icons/ui/ChevronRightMedium';\nimport {classNames, ClearSlots, SlotProvider, useHasChild} from '@react-spectrum/utils';\nimport {CSSTransition} from 'react-transition-group';\nimport type {DraggableItemResult, DropIndicatorAria, DroppableItemResult} from '@react-aria/dnd';\nimport {DropTarget, Node} from '@react-types/shared';\nimport {FocusRing, useFocusRing} from '@react-aria/focus';\nimport {Grid} from '@react-spectrum/layout';\nimport {isFocusVisible as isGlobalFocusVisible, useHover} from '@react-aria/interactions';\nimport ListGripper from '@spectrum-icons/ui/ListGripper';\nimport listStyles from './styles.css';\nimport {ListViewContext} from './ListView';\nimport {mergeProps} from '@react-aria/utils';\nimport {Provider} from '@react-spectrum/provider';\nimport React, {useContext, useRef} from 'react';\nimport {Text} from '@react-spectrum/text';\nimport {useButton} from '@react-aria/button';\nimport {useGridListItem, useGridListSelectionCheckbox} from '@react-aria/gridlist';\nimport {useLocale} from '@react-aria/i18n';\nimport {useVisuallyHidden} from '@react-aria/visually-hidden';\n\ninterface ListViewItemProps<T> {\n  item: Node<T>,\n  isEmphasized: boolean,\n  hasActions: boolean\n}\n\nexport function ListViewItem<T>(props: ListViewItemProps<T>) {\n  let {\n    item,\n    isEmphasized\n  } = props;\n  let {\n    state,\n    dragState,\n    dropState,\n    isListDraggable,\n    isListDroppable,\n    layout,\n    dragAndDropHooks,\n    loadingState\n  } = useContext(ListViewContext);\n  let {direction} = useLocale();\n  let rowRef = useRef<HTMLDivElement>(undefined);\n  let checkboxWrapperRef = useRef<HTMLDivElement>(undefined);\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = useFocusRing({within: true});\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let {\n    rowProps,\n    gridCellProps,\n    isPressed,\n    descriptionProps,\n    isSelected,\n    isDisabled,\n    allowsSelection,\n    hasAction\n  } = useGridListItem({\n    node: item,\n    isVirtualized: true,\n    shouldSelectOnPressUp: isListDraggable\n  }, state, rowRef);\n  let isDroppable = isListDroppable && !isDisabled;\n  let {hoverProps, isHovered} = useHover({isDisabled: !allowsSelection && !hasAction});\n\n  let {checkboxProps} = useGridListSelectionCheckbox({key: item.key}, state);\n  let hasDescription = useHasChild(`.${listStyles['react-spectrum-ListViewItem-description']}`, rowRef);\n\n  let draggableItem: DraggableItemResult;\n  if (isListDraggable) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    draggableItem = dragAndDropHooks.useDraggableItem({key: item.key, hasDragButton: true}, dragState);\n    if (isDisabled) {\n      draggableItem = null;\n    }\n  }\n  let droppableItem: DroppableItemResult;\n  let isDropTarget: boolean;\n  let dropIndicator: DropIndicatorAria;\n  let dropIndicatorRef = useRef(undefined);\n  if (isListDroppable) {\n    let target = {type: 'item', key: item.key, dropPosition: 'on'} as DropTarget;\n    isDropTarget = dropState.isDropTarget(target);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    dropIndicator = dragAndDropHooks.useDropIndicator({target}, dropState, dropIndicatorRef);\n  }\n\n  let dragButtonRef = React.useRef(undefined);\n  let {buttonProps} = useButton({\n    ...draggableItem?.dragButtonProps,\n    elementType: 'div'\n  }, dragButtonRef);\n\n  let chevron = direction === 'ltr'\n    ? (\n      <ChevronRightMedium\n        aria-hidden=\"true\"\n        UNSAFE_className={\n          classNames(\n            listStyles,\n            'react-spectrum-ListViewItem-parentIndicator',\n            {\n              'react-spectrum-ListViewItem-parentIndicator--hasChildItems': item.props.hasChildItems,\n              'is-disabled': !hasAction\n            }\n          )\n        } />\n    )\n    : (\n      <ChevronLeftMedium\n        aria-hidden=\"true\"\n        UNSAFE_className={\n          classNames(\n            listStyles,\n            'react-spectrum-ListViewItem-parentIndicator',\n            {\n              'react-spectrum-ListViewItem-parentIndicator--hasChildItems': item.props.hasChildItems,\n              'is-disabled': !hasAction\n            }\n          )\n        } />\n    );\n\n  let showCheckbox = state.selectionManager.selectionMode !== 'none' && state.selectionManager.selectionBehavior === 'toggle';\n  let {visuallyHiddenProps} = useVisuallyHidden();\n\n  let dropProps = isDroppable ? droppableItem?.dropProps : {'aria-hidden': droppableItem?.dropProps['aria-hidden']};\n  const mergedProps = mergeProps(\n    rowProps,\n    draggableItem?.dragProps,\n    dropProps,\n    hoverProps,\n    focusWithinProps,\n    focusProps,\n    // Remove tab index from list row if performing a screenreader drag. This prevents TalkBack from focusing the row,\n    // allowing for single swipe navigation between row drop indicator\n    dragAndDropHooks?.isVirtualDragging() && {tabIndex: null}\n  );\n\n  let isFirstRow = item.prevKey == null;\n  let isLastRow = item.nextKey == null;\n  // Figure out if the ListView content is equal or greater in height to the container. If so, we'll need to round the bottom\n  // border corners of the last row when selected and we can get rid of the bottom border if it isn't selected to avoid border overlap\n  // with bottom border\n  let isFlushWithContainerBottom = false;\n  if (isLastRow && loadingState !== 'loadingMore') {\n    if (layout.getContentSize()?.height >= layout.virtualizer?.visibleRect.height) {\n      isFlushWithContainerBottom = true;\n    }\n  }\n  // previous item isn't selected\n  // and the previous item isn't focused or, if it is focused, then if focus globally isn't visible or just focus isn't in the listview\n  let roundTops = (!state.selectionManager.isSelected(item.prevKey)\n    && (state.selectionManager.focusedKey !== item.prevKey || !(isGlobalFocusVisible() && state.selectionManager.isFocused)));\n  let roundBottoms = (!state.selectionManager.isSelected(item.nextKey)\n    && (state.selectionManager.focusedKey !== item.nextKey || !(isGlobalFocusVisible() && state.selectionManager.isFocused)));\n\n  let content = typeof item.rendered === 'string' ? <Text>{item.rendered}</Text> : item.rendered;\n  if (isDisabled) {\n    content = <Provider isDisabled>{content}</Provider>;\n  }\n\n  return (\n    <div\n      {...mergedProps}\n      className={\n        classNames(\n          listStyles,\n          'react-spectrum-ListView-row',\n          {\n            'focus-ring': isFocusVisible,\n            'round-tops':\n              roundTops || (isHovered && !isSelected && state.selectionManager.focusedKey !== item.key),\n            'round-bottoms':\n              roundBottoms || (isHovered && !isSelected && state.selectionManager.focusedKey !== item.key)\n          }\n        )\n      }\n      ref={rowRef}>\n      <div\n        // TODO: refactor the css here now that we are focusing the row?\n        className={\n          classNames(\n            listStyles,\n            'react-spectrum-ListViewItem',\n            {\n              'is-active': isPressed,\n              'is-focused': isFocusVisibleWithin,\n              'focus-ring': isFocusVisible,\n              'is-hovered': isHovered,\n              'is-selected': isSelected,\n              'is-disabled': isDisabled,\n              'is-prev-selected': state.selectionManager.isSelected(item.prevKey),\n              'is-next-selected': state.selectionManager.isSelected(item.nextKey),\n              'react-spectrum-ListViewItem--highlightSelection': state.selectionManager.selectionBehavior === 'replace' && (isSelected || state.selectionManager.isSelected(item.nextKey)),\n              'react-spectrum-ListViewItem--dropTarget': !!isDropTarget,\n              'react-spectrum-ListViewItem--firstRow': isFirstRow,\n              'react-spectrum-ListViewItem--lastRow': isLastRow,\n              'react-spectrum-ListViewItem--isFlushBottom': isFlushWithContainerBottom,\n              'react-spectrum-ListViewItem--hasDescription': hasDescription\n            }\n          )\n        }\n        {...gridCellProps}>\n        <Grid UNSAFE_className={listStyles['react-spectrum-ListViewItem-grid']}>\n          {isListDraggable &&\n            <div className={listStyles['react-spectrum-ListViewItem-draghandle-container']}>\n              {!isDisabled &&\n                <FocusRing focusRingClass={classNames(listStyles, 'focus-ring')}>\n                  <div\n                    {...buttonProps as React.HTMLAttributes<HTMLElement>}\n                    className={\n                      classNames(\n                        listStyles,\n                        'react-spectrum-ListViewItem-draghandle-button'\n                      )\n                    }\n                    style={!isFocusVisibleWithin ? {...visuallyHiddenProps.style} : {}}\n                    ref={dragButtonRef}\n                    draggable=\"true\">\n                    <ListGripper />\n                  </div>\n                </FocusRing>\n              }\n            </div>\n          }\n          {isListDroppable && !dropIndicator?.isHidden &&\n            <div role=\"button\" {...visuallyHiddenProps} {...dropIndicator?.dropIndicatorProps} ref={dropIndicatorRef} />\n          }\n          <CSSTransition\n            in={showCheckbox}\n            unmountOnExit\n            classNames={{\n              enter: listStyles['react-spectrum-ListViewItem-checkbox--enter'],\n              enterActive: listStyles['react-spectrum-ListViewItem-checkbox--enterActive'],\n              exit: listStyles['react-spectrum-ListViewItem-checkbox--exit'],\n              exitActive: listStyles['react-spectrum-ListViewItem-checkbox--exitActive']\n            }}\n            timeout={160}\n            nodeRef={checkboxWrapperRef} >\n            <div ref={checkboxWrapperRef} className={listStyles['react-spectrum-ListViewItem-checkboxWrapper']}>\n              <Checkbox\n                {...checkboxProps}\n                UNSAFE_className={listStyles['react-spectrum-ListViewItem-checkbox']}\n                isEmphasized={isEmphasized} />\n            </div>\n          </CSSTransition>\n          <SlotProvider\n            slots={{\n              text: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-content']},\n              description: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-description'], ...descriptionProps},\n              illustration: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-thumbnail']},\n              image: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-thumbnail']},\n              actionButton: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-actions'], isQuiet: true},\n              actionGroup: {\n                UNSAFE_className: listStyles['react-spectrum-ListViewItem-actions'],\n                isQuiet: true,\n                density: 'compact'\n              },\n              actionMenu: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-actionmenu'], isQuiet: true}\n            }}>\n            {content}\n            <ClearSlots>\n              {chevron}\n            </ClearSlots>\n          </SlotProvider>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"version":3,"file":"ListViewItem.main.js.map"}