{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;;;;;;;;AAqBD,SAAS,gCAA4B,KAAgC,EAAE,GAA2B;IAChG,IAAI,SAAS,MAAM,iBAAiB,KAAK;IACzC,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IAEvB,qBACE,0DAAC,CAAA,GAAA,2CAAa;QACZ,SAAS;QACT,IAAI;QACJ,cAAA;QACA,eAAA;qBACA,0DAAC;QAAuB,GAAG,KAAK;QAAE,KAAK;;AAG7C;AAMA,SAAS,qCAAkB,KAA6B,EAAE,GAAwB;IAChF,QAAQ,CAAA,GAAA,6CAAe,EAAE;IAEzB,IAAI,YACF,QAAQ,gBACR,YAAY,YACZ,QAAQ,oBACR,gBAAgB,qBAChB,iBAAiB,UACjB,MAAM,uBACN,sBAAsB,mBACtB,KAAK,gBACL,YAAY,EACb,GAAG;IAEJ,IAAI,cAAC,UAAU,EAAC,GAAG,CAAA,GAAA,uCAAY,EAAE;IACjC,IAAI,kBAAkB,CAAA,GAAA,gDAA0B,EAAE,CAAA,GAAA,mDAAW,GAAG;IAEhE,mHAAmH;IACnH,IAAI,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qBAAO,EAAE;IACzC,IAAI,AAAC,CAAA,sBAAsB,SAAS,oBAAoB,CAAA,KAAM,sBAAsB,WAClF,aAAa;IAGf,IAAI,iBAAC,aAAa,EAAC,GAAG,CAAA,GAAA,wCAAU,EAAE;QAChC,WAAU,CAAC;YACT,IAAI,EAAE,GAAG,KAAK,UAAU;gBACtB,EAAE,cAAc;gBAChB;YACF;QACF;IACF;IAEA,yCAAyC;IACzC,IAAI,YAAY,CAAA,GAAA,mBAAK,EAAE;IACvB,CAAA,GAAA,sBAAQ,EAAE;QACR,IAAI,UAAU,OAAO,EAAE;YACrB,UAAU,OAAO,GAAG;YACpB,CAAA,GAAA,sCAAO,EAAE,gBAAgB,MAAM,CAAC;QAClC;IACF,GAAG;QAAC;KAAgB;IAEpB,qBACE,0DAAC,CAAA,GAAA,gCAAS;QAAE,cAAA;qBACV,0DAAC;QACE,GAAG,CAAA,GAAA,oCAAa,EAAE,MAAM;QACxB,GAAG,UAAU;QACb,GAAG,aAAa;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,oCAAS,EAClB,CAAA,GAAA,mDAAK,GACL,4BAA4B;YAC1B,wCAAwC;YACxC,WAAW;QACb,GACA,WAAW,SAAS;qBAEtB,0DAAC;QAAI,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;qBACjC,0DAAC,CAAA,GAAA,2CAAU;QACT,OAAO;QACP,cAAY,gBAAgB,MAAM,CAAC;QACnC,SAAA;QACA,aAAa,eAAe,UAAU;QACtC,cAAa;QACb,qBAAqB;QACrB,UAAU;QACV,cAAc;QACd,kBAAkB,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;OACpC,yBAEH,0DAAC,CAAA,GAAA,uCAAW;QACV,UAAU,CAAA,GAAA,mDAAK,EAAE,KAAK;QACtB,cAAY,gBAAgB,MAAM,CAAC;QACnC,SAAS,IAAM;QACf,SAAA;QACA,aAAa,eAAe,UAAU;qBACtC,0DAAC,CAAA,GAAA,0DAAS,yBAEZ,0DAAC,CAAA,GAAA,6BAAG;QAAE,kBAAkB,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;OACxC,cAAc,QACX,gBAAgB,MAAM,CAAC,iBACvB,gBAAgB,MAAM,CAAC,YAAY;QAAC,OAAO;IAAS;AAMpE;AAEA,MAAM,4DAAwB,CAAA,GAAA,sCAAI,EAAE,UAAU,CAAC;AAE/C;;CAEC,GACD,MAAM,0DAAa,CAAA,GAAA,sCAAI,EAAE,UAAU,CAAC","sources":["packages/@react-spectrum/actionbar/src/ActionBar.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ActionButton} from '@react-spectrum/button';\nimport {ActionGroup} from '@react-spectrum/actiongroup';\nimport {announce} from '@react-aria/live-announcer';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport CrossLarge from '@spectrum-icons/ui/CrossLarge';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {FocusScope} from '@react-aria/focus';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {OpenTransition} from '@react-spectrum/overlays';\nimport React, {ReactElement, Ref, useEffect, useRef, useState} from 'react';\nimport {SpectrumActionBarProps} from '@react-types/actionbar';\nimport styles from './actionbar.css';\nimport {Text} from '@react-spectrum/text';\nimport {useKeyboard} from '@react-aria/interactions';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ActionBar<T extends object>(props: SpectrumActionBarProps<T>, ref: DOMRef<HTMLDivElement>) {\n  let isOpen = props.selectedItemCount !== 0;\n  let domRef = useDOMRef(ref);\n\n  return (\n    <OpenTransition\n      nodeRef={domRef}\n      in={isOpen}\n      mountOnEnter\n      unmountOnExit>\n      <ActionBarInnerWithRef {...props} ref={domRef} />\n    </OpenTransition>\n  );\n}\n\ninterface ActionBarInnerProps<T> extends SpectrumActionBarProps<T> {\n  isOpen?: boolean\n}\n\nfunction ActionBarInner<T>(props: ActionBarInnerProps<T>, ref: Ref<HTMLDivElement>) {\n  props = useProviderProps(props);\n\n  let {\n    children,\n    isEmphasized,\n    onAction,\n    onClearSelection,\n    selectedItemCount,\n    isOpen,\n    buttonLabelBehavior = 'collapse',\n    items,\n    disabledKeys\n  } = props;\n\n  let {styleProps} = useStyleProps(props);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/actionbar');\n\n  // Store the last count greater than zero in a ref so that we can retain it while rendering the fade-out animation.\n  let [lastCount, setLastCount] = useState(selectedItemCount);\n  if ((selectedItemCount === 'all' || selectedItemCount > 0) && selectedItemCount !== lastCount) {\n    setLastCount(selectedItemCount);\n  }\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown(e) {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        onClearSelection();\n      }\n    }\n  });\n\n  // Announce \"actions available\" on mount.\n  let isInitial = useRef(true);\n  useEffect(() => {\n    if (isInitial.current) {\n      isInitial.current = false;\n      announce(stringFormatter.format('actionsAvailable'));\n    }\n  }, [stringFormatter]);\n\n  return (\n    <FocusScope restoreFocus>\n      <div\n        {...filterDOMProps(props)}\n        {...styleProps}\n        {...keyboardProps}\n        ref={ref}\n        className={classNames(\n          styles,\n          'react-spectrum-ActionBar', {\n            'react-spectrum-ActionBar--emphasized': isEmphasized,\n            'is-open': isOpen\n          },\n          styleProps.className\n        )}>\n        <div className={classNames(styles, 'react-spectrum-ActionBar-bar')}>\n          <ActionGroup\n            items={items}\n            aria-label={stringFormatter.format('actions')}\n            isQuiet\n            staticColor={isEmphasized ? 'white' : undefined}\n            overflowMode=\"collapse\"\n            buttonLabelBehavior={buttonLabelBehavior}\n            onAction={onAction}\n            disabledKeys={disabledKeys}\n            UNSAFE_className={classNames(styles, 'react-spectrum-ActionBar-actionGroup')}>\n            {children}\n          </ActionGroup>\n          <ActionButton\n            gridArea={styles.clear}\n            aria-label={stringFormatter.format('clearSelection')}\n            onPress={() => onClearSelection()}\n            isQuiet\n            staticColor={isEmphasized ? 'white' : undefined}>\n            <CrossLarge />\n          </ActionButton>\n          <Text UNSAFE_className={classNames(styles, 'react-spectrum-ActionBar-selectedCount')}>\n            {lastCount === 'all'\n              ? stringFormatter.format('selectedAll')\n              : stringFormatter.format('selected', {count: lastCount})}\n          </Text>\n        </div>\n      </div>\n    </FocusScope>\n  );\n}\n\nconst ActionBarInnerWithRef = React.forwardRef(ActionBarInner) as <T>(props: ActionBarInnerProps<T> & {ref?: Ref<HTMLDivElement>}) => ReactElement;\n\n/**\n * Action bars are used for single and bulk selection patterns when a user needs to perform actions on one or more items at the same time.\n */\nconst _ActionBar = React.forwardRef(ActionBar) as <T>(props: SpectrumActionBarProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\nexport {_ActionBar as ActionBar};\n"],"names":[],"version":3,"file":"ActionBar.main.js.map"}