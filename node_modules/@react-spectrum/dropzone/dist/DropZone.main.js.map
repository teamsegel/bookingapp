{"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;AAqBD,oFAAoF;AACpF,IAAI,oCAAc,CAAC;IACjB,6DAA6D;IAC7D,IAAI,gBAAC,YAAY,iBAAE,aAAa,cAAE,UAAU,EAAE,GAAG,YAAW,GAAG;IAC/D,OAAO;AACT;AAEA,SAAS,+BAAS,KAA4B,EAAE,GAA2B;IACzE,IAAI,YAAC,QAAQ,YAAE,QAAQ,kBAAE,cAAc,EAAE,GAAG,YAAW,GAAG;IAC1D,IAAI,cAAC,UAAU,EAAC,GAAG,CAAA,GAAA,uCAAY,EAAE;IACjC,IAAI,SAAS,CAAA,GAAA,mCAAQ,EAAE;IACvB,IAAI,YAAY,CAAA,GAAA,2BAAI;IACpB,IAAI,YAAY,CAAA,GAAA,2BAAI;IACpB,IAAI,kBAAkB,CAAA,GAAA,gDAA0B,EAAE,CAAA,GAAA,mDAAW,GAAG;IAChE,IAAI,iBAAiB,WAAW,CAAC,EAAE,UAAU,CAAC,EAAE,UAAU,CAAC,GAAG;IAE9D,qBACE,0DAAC,CAAA,GAAA,mCAAO;QACN,QAAQ;YACN;gBAAC,CAAA,GAAA,yCAAa;gBAAG;oBAAC,IAAI;gBAAS;aAAE;SAClC;qBACD,0DAAC,CAAA,GAAA,mCAAU;QACR,GAAG,CAAA,GAAA,gCAAS,EAAE,kCAAY,YAAY;QACtC,GAAG,UAAU;QACd,mBAAiB;QACjB,WACA,CAAA,GAAA,oCAAS,EACP,CAAA,GAAA,mDAAK,GACL,qBACA,WAAW,SAAS,EACpB;YAAC,6BAA6B;QAAQ;QAExC,KAAK;qBACL,0DAAC,CAAA,GAAA,sCAAW;QACV,OAAO;YACL,cAAc;gBAAC,kBAAkB,CAAA,GAAA,oCAAS,EACxC,CAAA,GAAA,mDAAK,GACL;YACC;QACL;OACC,yBAEH,0DAAC;QAAI,WAAW,CAAA,GAAA,oCAAS,EAAE,CAAA,GAAA,mDAAK,GAAG;sBACnC,0DAAC;QACC,IAAI;QACJ,WACE,CAAA,GAAA,oCAAS,EACP,CAAA,GAAA,mDAAK,GACL,4BACA,WAAW,SAAS;OAGvB,iBAAiB,iBAAiB,gBAAgB,MAAM,CAAC;AAKpE;AAEA;;CAEC,GACD,IAAI,yDAAY,CAAA,GAAA,sCAAI,EAAE,UAAU,CAAC","sources":["packages/@react-spectrum/dropzone/src/DropZone.tsx"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, DOMRef, StyleProps} from '@react-types/shared';\nimport {classNames, SlotProvider, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DropZoneProps, HeadingContext, Provider, DropZone as RACDropZone} from 'react-aria-components';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport React, {ReactNode} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/dropzone/vars.css';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface SpectrumDropZoneProps extends Omit<DropZoneProps, 'onHoverStart' | 'onHoverChange' | 'onHoverEnd' | 'isDisabled' | 'className' | 'style'>, DOMProps, StyleProps, AriaLabelingProps {\n  /** The content to display in the drop zone. */\n  children: ReactNode,\n  /** Whether the drop zone has been filled. */\n  isFilled?: boolean,\n  /** The message to replace the default banner message that is shown when the drop zone is filled. */\n  replaceMessage?: string\n}\n\n// Filter out props used by RAC DropZone that we don't want in RSP DropZone for now.\nlet filterProps = (props) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {onHoverStart, onHoverChange, onHoverEnd, ...otherProps} = props;\n  return otherProps;\n};\n\nfunction DropZone(props: SpectrumDropZoneProps, ref: DOMRef<HTMLDivElement>) {\n  let {children, isFilled, replaceMessage, ...otherProps} = props;\n  let {styleProps} = useStyleProps(props);\n  let domRef = useDOMRef(ref);\n  let messageId = useId();\n  let headingId = useId();\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/dropzone');\n  let ariaLabelledby = isFilled ? `${headingId} ${messageId}` : headingId;\n\n  return (\n    <Provider\n      values={[\n        [HeadingContext, {id: headingId}]\n      ]}>\n      <RACDropZone\n        {...mergeProps(filterProps(otherProps))}\n        {...styleProps as Omit<React.HTMLAttributes<HTMLElement>, 'onDrop'>}\n        aria-labelledby={ariaLabelledby}\n        className={\n        classNames(\n          styles,\n          'spectrum-Dropzone',\n          styleProps.className,\n          {'spectrum-Dropzone--filled': isFilled}\n        )}\n        ref={domRef}>\n        <SlotProvider\n          slots={{\n            illustration: {UNSAFE_className: classNames(\n              styles,\n              'spectrum-Dropzone-illustratedMessage'\n              )}\n          }}>\n          {children}\n        </SlotProvider>\n        <div className={classNames(styles, 'spectrum-Dropzone-backdrop')} />\n        <div\n          id={messageId}\n          className={\n            classNames(\n              styles,\n              'spectrum-Dropzone-banner',\n              styleProps.className\n            )\n          }>\n          {replaceMessage ? replaceMessage : stringFormatter.format('replaceMessage')}\n        </div>\n      </RACDropZone>\n    </Provider>\n  );\n}\n\n/**\n * A drop zone is an area into which one or multiple objects can be dragged and dropped.\n */\nlet _DropZone = React.forwardRef(DropZone);\nexport {_DropZone as DropZone};\n"],"names":[],"version":3,"file":"DropZone.main.js.map"}