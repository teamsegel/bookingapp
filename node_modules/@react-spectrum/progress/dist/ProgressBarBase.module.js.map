{"mappings":";;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;AAeD,gDAAgD;AAChD,SAAS,sCAAgB,KAA2B,EAAE,GAA2B;IAC/E,IAAI,SACF,QAAQ,aACR,WAAW,aACX,WAAW,WACX,OAAO,YACP,KAAK,gBACL,YAAY,kBACZ,iBAAiB,CAAC,CAAC,sBACnB,gBAAgB,wBAChB,kBAAkB,iBAClB,QAAQ,cACR,UAAU,EACV,cAAc,SAAS,EACvB,mBAAmB,cAAc,EACjC,GAAG,YACJ,GAAG;IACJ,IAAI,SAAS,CAAA,GAAA,gBAAQ,EAAE;IACvB,IAAI,cAAC,UAAU,EAAC,GAAG,CAAA,GAAA,oBAAY,EAAE;IAEjC,QAAQ,CAAA,GAAA,YAAI,EAAE,OAAO,UAAU;IAE/B,IAAI,WAA0B,CAAC;IAC/B,IAAI,CAAC,iBAAiB;QACpB,IAAI,aAAa,AAAC,CAAA,QAAQ,QAAO,IAAM,CAAA,WAAW,QAAO;QACzD,SAAS,KAAK,GAAG,CAAC,EAAE,KAAK,KAAK,CAAC,aAAa,KAAK,CAAC,CAAC;IACrD;IAEA,yDAAyD;IACzD,gEAAgE;IAChE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,gBAC3B,QAAQ,IAAI,CAAC;IAEf,uHAAuH;IACvH,qBACE,gCAAC;QACE,GAAG,QAAQ;QACZ,KAAK;QACL,WACE,CAAA,GAAA,iBAAS,EACP,CAAA,GAAA,2DAAK,GACL,sBACA;YACE,6BAA6B,SAAS;YACtC,6BAA6B,SAAS;YACtC,qCAAqC;YACrC,iCAAiC,kBAAkB;QACrD,GACA,cACA,WAAW,SAAS;QAGxB,OAAO;YAAC,UAAU;YAAoB,GAAG,WAAW,KAAK;QAAA;OACxD,uBACC,gCAAC;QACE,GAAG,UAAU;QACd,WAAW,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,2DAAK,GAAG;OAC3B,QAGN,kBAAkB,0BACjB,gCAAC;QAAI,WAAW,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,2DAAK,GAAG;OAChC,QAAQ,CAAC,iBAAiB,iBAG/B,gCAAC;QAAI,WAAW,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,2DAAK,GAAG;qBACjC,gCAAC;QACC,WAAW,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,2DAAK,GAAG;QAC9B,OAAO;;AAIjB;AAEA,IAAI,0DAAmB,CAAA,GAAA,YAAI,EAAE,UAAU,CAAC","sources":["packages/@react-spectrum/progress/src/ProgressBarBase.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp} from '@react-aria/utils';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {ProgressBarProps, SpectrumProgressBarBaseProps} from '@react-types/progress';\nimport React, {CSSProperties, HTMLAttributes} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/barloader/vars.css';\n\ninterface ProgressBarBaseProps extends SpectrumProgressBarBaseProps, ProgressBarProps {\n  barClassName?: string,\n  barProps?: HTMLAttributes<HTMLDivElement>,\n  labelProps?: HTMLAttributes<HTMLLabelElement>\n}\n\n// Base ProgressBar component shared with Meter.\nfunction ProgressBarBase(props: ProgressBarBaseProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'L',\n    label,\n    barClassName,\n    showValueLabel = !!label,\n    labelPosition = 'top',\n    isIndeterminate = false,\n    barProps,\n    labelProps,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  value = clamp(value, minValue, maxValue);\n\n  let barStyle: CSSProperties = {};\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue);\n    barStyle.width = `${Math.round(percentage * 100)}%`;\n  }\n\n  // Ideally this should be in useProgressBar, but children\n  // are not supported in ProgressCircle which shares that hook...\n  if (!label && !ariaLabel && !ariaLabelledby) {\n    console.warn('If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n  // use inline style for fit-content because cssnano is too smart for us and will strip out the -moz prefix in css files\n  return (\n    <div\n      {...barProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-BarLoader',\n          {\n            'spectrum-BarLoader--small': size === 'S',\n            'spectrum-BarLoader--large': size === 'L',\n            'spectrum-BarLoader--indeterminate': isIndeterminate,\n            'spectrum-BarLoader--sideLabel': labelPosition === 'side'\n          },\n          barClassName,\n          styleProps.className\n        )\n      }\n      style={{minWidth: '-moz-fit-content', ...styleProps.style}}>\n      {label &&\n        <span\n          {...labelProps}\n          className={classNames(styles, 'spectrum-BarLoader-label')}>\n            {label}\n        </span>\n      }\n      {showValueLabel && barProps && \n        <div className={classNames(styles, 'spectrum-BarLoader-percentage')}>\n          {barProps['aria-valuetext']}\n        </div>\n      }\n      <div className={classNames(styles, 'spectrum-BarLoader-track')}>\n        <div\n          className={classNames(styles, 'spectrum-BarLoader-fill')}\n          style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nlet _ProgressBarBase = React.forwardRef(ProgressBarBase);\nexport {_ProgressBarBase as ProgressBarBase};\n"],"names":[],"version":3,"file":"ProgressBarBase.module.js.map"}