{"mappings":";;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;AAWD,SAAS,oCAAc,KAAiC;IACtD,IAAI,YACF,QAAQ,QACR,OAAO,qBACP,aAAa,SAAS,YAAY,UAAU,iBAC5C,SAAS,aACT,SAAS,iBACT,aAAa,6BACb,yBAAyB,EACzB,GAAG,eACJ,GAAG;IACJ,IAAI,CAAC,MAAM,OAAO,CAAC,aAAa,SAAS,MAAM,GAAG,GAChD,MAAM,IAAI,MAAM;IAElB,0EAA0E;IAC1E,IAAI,CAAC,SAAS,QAAQ,GAAG;IAEzB,+DAA+D;IAC/D,IAAI,WAAW,CAAA,GAAA,wBAAgB;IAC/B,IAAI,UAAU;QACZ,oFAAoF;QACpF,IAAI,SAAS,WAAW,eAAe,SACrC,gBAAgB;QAGlB,OAAO;IACT;IAEA,IAAI,QAAQ,CAAA,GAAA,6BAAqB,EAAE;IACnC,IAAI,UAAU,CAAA,GAAA,aAAK,EAAE;IACrB,CAAA,GAAA,gBAAQ,EAAE;QACR,QAAQ,OAAO,GAAG,MAAM,MAAM;IAChC,GAAG;QAAC,MAAM,MAAM;KAAC;IAEjB,IAAI,YAAY,CAAA,GAAA,aAAK,EAAE;IACvB,IAAI,YAAY,IAAM,UAAU,OAAO,GAAG;IAC1C,IAAI,WAAW,IAAM,UAAU,OAAO,GAAG;IAEzC,4CAA4C;IAC5C,CAAA,GAAA,gBAAQ,EAAE;QACR,OAAO;YACL,IAAI,AAAC,CAAA,QAAQ,OAAO,IAAI,UAAU,OAAO,AAAD,KAAM,SAAS,aAAa,SAAS,QAC3E,QAAQ,IAAI,CAAC;QAEjB;IACF,uDAAuD;IACvD,GAAG,EAAE;IAEL,IAAI,SAAS,WACX,qBACE,gCAAC;QACE,GAAG,aAAa;QACjB,OAAO;QACP,WAAW;QACX,SAAS;QACT,SAAS;QACT,2BAA2B;QAC3B,WAAW;;IAIjB,IAAI,gBAAgB;QAClB,OAAQ;YACN,KAAK;YACL,KAAK;YACL,KAAK;gBACH,qBACE,gCAAC,CAAA,GAAA,YAAI;oBACH,OAAO;oBACP,eAAe,SAAS,UAAU,gBAAgB;oBAClD,MAAM;oBACN,2BAA2B;oBAC3B,WAAW;oBACX,UAAU;mBACT,OAAO,YAAY,aAAa,QAAQ,MAAM,KAAK,IAAI;YAG9D,KAAK;gBACH,qBACE,gCAAC,CAAA,GAAA,WAAG;oBACF,OAAO;oBACP,2BAA2B;mBAC1B,OAAO,YAAY,aAAa,QAAQ,MAAM,KAAK,IAAI;QAGhE;IACF;IAEA,qBACE,gCAAC;QACC,MAAM;QACN,OAAO;QACP,eAAe;QACf,SAAS;QACT,SAAS;;AAEf;AAEA,mEAAmE;AACnE,oCAAc,iBAAiB,GAAG,UAAW,KAAiC;IAC5E,wEAAwE;IACxE,IAAI,CAAC,QAAQ,GAAG,CAAA,GAAA,YAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,MAAM,QAAQ;IACrD,IAAI,GAAG,QAAQ,GAAG,MAAM,QAAQ;IAChC,MAAM;QACJ,SAAS;QACT,SAAS,CAAC,wBACR,gCAAC;gBAAc,KAAK,QAAQ,GAAG;gBAAG,GAAG,KAAK;eACvC,SACA;IAGP;AACF;AAEA;;;;CAIC,GAED,oEAAoE;AACpE,IAAI,4CAAiB;AAGrB,SAAS,qCAAe,SAAC,KAAK,aAAE,SAAS,WAAE,OAAO,WAAE,OAAO,aAAE,SAAS,EAAE,GAAG,OAAM;IAC/E,IAAI,aAAa,CAAA,GAAA,aAAK,EAAe;IACrC,IAAI,gBAAC,YAAY,gBAAE,YAAY,EAAC,GAAG,CAAA,GAAA,wBAAgB,EAAE;QAAC,MAAM;IAAQ,GAAG,OAAO;IAE9E,IAAI,sBAAsB;QACxB,GAAG,YAAY;QACf,KAAK,YAAY,YAAY;IAC/B;IAEA,IAAI,wBACF,gCAAC,CAAA,GAAA,cAAM;QACJ,GAAG,KAAK;QACT,WAAW;QACX,YAAY,aAAa;QACzB,OAAO;OACN,OAAO,YAAY,aAAa,QAAQ,MAAM,KAAK,IAAI;IAI5D,qBACE,gCAAC;QACC,MAAK;QACL,OAAO;QACP,cAAc;QACd,aAAa;QACb,SAAS;QACT,SAAS;;AAEf;AAYA,SAAS,wCAAkB,QAAC,IAAI,SAAE,KAAK,iBAAE,aAAa,eAAE,cAAc,CAAC,iBAAG,eAAe,CAAC,YAAG,OAAO,WAAE,OAAO,EAA4B;IACvI,IAAI,UAAU;cACZ;QACA,SAAS,MAAM,KAAK;uBACpB;QACA,GAAG,WAAW;IAChB;IAEA,qBACE,gCAAC,CAAA,GAAA,eAAO,uBACN,gCAAC,CAAA,GAAA,qBAAa;QACX,GAAG,YAAY;QAChB,SAAS,MAAM,MAAM;QACrB,WAAW,MAAM,MAAM,IAAI,SAAS,WAAW,SAAS,gBAAgB,SAAS;OAChF,wBAEH,gCAAC,CAAA,GAAA,yCAAY,EAAE,QAAQ;QAAC,OAAO;OAC5B;AAIT","sources":["packages/@react-spectrum/dialog/src/DialogTrigger.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DialogContext} from './context';\nimport {Modal, Popover, Tray} from '@react-spectrum/overlays';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {PressResponder} from '@react-aria/interactions';\nimport React, {Fragment, JSX, ReactElement, useEffect, useRef} from 'react';\nimport {SpectrumDialogClose, SpectrumDialogProps, SpectrumDialogTriggerProps} from '@react-types/dialog';\nimport {useIsMobileDevice} from '@react-spectrum/utils';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\nfunction DialogTrigger(props: SpectrumDialogTriggerProps) {\n  let {\n    children,\n    type = 'modal',\n    mobileType = type === 'popover' ? 'modal' : type,\n    hideArrow,\n    targetRef,\n    isDismissable,\n    isKeyboardDismissDisabled,\n    ...positionProps\n  } = props;\n  if (!Array.isArray(children) || children.length > 2) {\n    throw new Error('DialogTrigger must have exactly 2 children');\n  }\n  // if a function is passed as the second child, it won't appear in toArray\n  let [trigger, content] = children as [ReactElement, SpectrumDialogClose];\n\n  // On small devices, show a modal or tray instead of a popover.\n  let isMobile = useIsMobileDevice();\n  if (isMobile) {\n    // handle cases where desktop popovers need a close button for the mobile modal view\n    if (type !== 'modal' && mobileType === 'modal') {\n      isDismissable = true;\n    }\n\n    type = mobileType;\n  }\n\n  let state = useOverlayTriggerState(props);\n  let wasOpen = useRef(false);\n  useEffect(() => {\n    wasOpen.current = state.isOpen;\n  }, [state.isOpen]);\n\n  let isExiting = useRef(false);\n  let onExiting = () => isExiting.current = true;\n  let onExited = () => isExiting.current = false;\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if ((wasOpen.current || isExiting.current) && type !== 'popover' && type !== 'tray') {\n        console.warn('A DialogTrigger unmounted while open. This is likely due to being placed within a trigger that unmounts or inside a conditional. Consider using a DialogContainer instead.');\n      }\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (type === 'popover') {\n    return (\n      <PopoverTrigger\n        {...positionProps}\n        state={state}\n        targetRef={targetRef}\n        trigger={trigger}\n        content={content}\n        isKeyboardDismissDisabled={isKeyboardDismissDisabled}\n        hideArrow={hideArrow} />\n    );\n  }\n\n  let renderOverlay = () => {\n    switch (type) {\n      case 'fullscreen':\n      case 'fullscreenTakeover':\n      case 'modal':\n        return (\n          <Modal\n            state={state}\n            isDismissable={type === 'modal' ? isDismissable : false}\n            type={type}\n            isKeyboardDismissDisabled={isKeyboardDismissDisabled}\n            onExiting={onExiting}\n            onExited={onExited}>\n            {typeof content === 'function' ? content(state.close) : content}\n          </Modal>\n        );\n      case 'tray':\n        return (\n          <Tray\n            state={state}\n            isKeyboardDismissDisabled={isKeyboardDismissDisabled}>\n            {typeof content === 'function' ? content(state.close) : content}\n          </Tray>\n        );\n    }\n  };\n\n  return (\n    <DialogTriggerBase\n      type={type}\n      state={state}\n      isDismissable={isDismissable}\n      trigger={trigger}\n      overlay={renderOverlay()} />\n  );\n}\n\n// Support DialogTrigger inside components using CollectionBuilder.\nDialogTrigger.getCollectionNode = function* (props: SpectrumDialogTriggerProps) {\n  // @ts-ignore - seems like types are wrong. Function children work fine.\n  let [trigger] = React.Children.toArray(props.children);\n  let [, content] = props.children as [ReactElement, SpectrumDialogClose];\n  yield {\n    element: trigger,\n    wrapper: (element) => (\n      <DialogTrigger key={element.key} {...props}>\n        {element}\n        {content}\n      </DialogTrigger>\n    )\n  };\n};\n\n/**\n * DialogTrigger serves as a wrapper around a Dialog and its associated trigger, linking the Dialog's\n * open state with the trigger's press state. Additionally, it allows you to customize the type and\n * positioning of the Dialog.\n */\n\n// We don't want getCollectionNode to show up in the type definition\nlet _DialogTrigger = DialogTrigger as (props: SpectrumDialogTriggerProps) => JSX.Element;\nexport {_DialogTrigger as DialogTrigger};\n\nfunction PopoverTrigger({state, targetRef, trigger, content, hideArrow, ...props}) {\n  let triggerRef = useRef<HTMLElement>(null);\n  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state, triggerRef);\n\n  let triggerPropsWithRef = {\n    ...triggerProps,\n    ref: targetRef ? undefined : triggerRef\n  };\n\n  let overlay = (\n    <Popover\n      {...props}\n      hideArrow={hideArrow}\n      triggerRef={targetRef || triggerRef}\n      state={state}>\n      {typeof content === 'function' ? content(state.close) : content}\n    </Popover>\n  );\n\n  return (\n    <DialogTriggerBase\n      type=\"popover\"\n      state={state}\n      triggerProps={triggerPropsWithRef}\n      dialogProps={overlayProps}\n      trigger={trigger}\n      overlay={overlay} />\n  );\n}\n\ninterface SpectrumDialogTriggerBase {\n  type: 'modal' | 'popover' | 'tray' | 'fullscreen' | 'fullscreenTakeover',\n  state: OverlayTriggerState,\n  isDismissable?: boolean,\n  dialogProps?: SpectrumDialogProps | {},\n  triggerProps?: any,\n  overlay?: ReactElement,\n  trigger: ReactElement\n}\n\nfunction DialogTriggerBase({type, state, isDismissable, dialogProps = {}, triggerProps = {}, overlay, trigger}: SpectrumDialogTriggerBase) {\n  let context = {\n    type,\n    onClose: state.close,\n    isDismissable,\n    ...dialogProps\n  };\n\n  return (\n    <Fragment>\n      <PressResponder\n        {...triggerProps}\n        onPress={state.toggle}\n        isPressed={state.isOpen && type !== 'modal' && type !== 'fullscreen' && type !== 'fullscreenTakeover'}>\n        {trigger}\n      </PressResponder>\n      <DialogContext.Provider value={context}>\n        {overlay}\n      </DialogContext.Provider>\n    </Fragment>\n  );\n}\n"],"names":[],"version":3,"file":"DialogTrigger.module.js.map"}