{"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;;;;;;;;AAqBD;;CAEC,GACD,SAAS,kCAAY,KAA+B,EAAE,GAAW;IAC/D,IAAI,WACF,UAAU,KAAO,GAClB,GAAG,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,yCAAY,MAAM,CAAC;IAElC,IAAI,WACF,OAAO,YACP,QAAQ,sBACR,kBAAkB,wBAClB,oBAAoB,eACpB,WAAW,mBACX,eAAe,SACf,KAAK,2BACL,uBAAuB,6BACvB,yBAAyB,YACzB,WAAW,KAAO,oBAClB,kBAAkB,KAAO,sBACzB,oBAAoB,KAAO,GAC3B,GAAG,YACJ,GAAG;IACJ,IAAI,cAAC,UAAU,EAAC,GAAG,CAAA,GAAA,oBAAY,EAAE;IACjC,IAAI,kBAAkB,CAAA,GAAA,kCAA0B,EAAE,CAAA,GAAA,oDAAW,GAAG;IAEhE,IAAI,iBAAiD;IACrD,IAAI,SAAS;QACX,IAAI,YAAY,gBACd,iBAAiB;aACZ,IAAI,YAAY,eACrB,iBAAiB;IAErB;IAEA,qBACE,gCAAC,CAAA,GAAA,yCAAK;QACJ,cAAc,WAAW,KAAK;QAC9B,kBAAkB,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,wDAAK,GAAG;YAAC,CAAC,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC,EAAE;QAAO,GAAG,WAAW,SAAS;QACrG,UAAU,WAAW,MAAM;QAC3B,MAAK;QACL,MAAK;QACL,KAAK;qBACL,gCAAC,CAAA,GAAA,cAAM,SAAG,QACT,AAAC,CAAA,YAAY,WAAW,YAAY,SAAQ,mBAC3C,gCAAC,CAAA,GAAA,iCAAU;QACT,MAAK;QACL,cAAY,gBAAgB,MAAM,CAAC;sBAEvC,gCAAC,CAAA,GAAA,cAAM,wBACP,gCAAC,CAAA,GAAA,cAAM,SAAG,yBACV,gCAAC,CAAA,GAAA,kBAAU;QAAE,OAAM;OAChB,6BACC,gCAAC,CAAA,GAAA,aAAK;QACJ,SAAQ;QACR,SAAS,IAAM,CAAA,GAAA,YAAI,EAAE,WAAW;QAChC,WAAW,oBAAoB;OAC9B,cAGJ,sCACC,gCAAC,CAAA,GAAA,aAAK;QACJ,SAAQ;QACR,SAAS,IAAM,CAAA,GAAA,YAAI,EAAE,WAAW;QAChC,YAAY;QACZ,WAAW,oBAAoB;OAC9B,qCAGL,gCAAC,CAAA,GAAA,aAAK;QACJ,SAAS;QACT,SAAS,IAAM,CAAA,GAAA,YAAI,EAAE,WAAW;QAChC,YAAY;QACZ,WAAW,oBAAoB;OAC9B;AAKX;AAEA;;CAEC,GACD,IAAI,0DAAe,CAAA,GAAA,iBAAS,EAAE","sources":["packages/@react-spectrum/dialog/src/AlertDialog.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport {Button} from '@react-spectrum/button';\nimport {ButtonGroup} from '@react-spectrum/buttongroup';\nimport {chain} from '@react-aria/utils';\nimport {classNames, useStyleProps} from '@react-spectrum/utils';\nimport {Content} from '@react-spectrum/view';\nimport {Dialog} from './Dialog';\nimport {DialogContext, DialogContextValue} from './context';\nimport {Divider} from '@react-spectrum/divider';\nimport {DOMRef} from '@react-types/shared';\nimport {Heading} from '@react-spectrum/text';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {forwardRef, useContext} from 'react';\nimport {SpectrumAlertDialogProps} from '@react-types/dialog';\nimport {SpectrumButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/dialog/vars.css';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\n/**\n * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.\n */\nfunction AlertDialog(props: SpectrumAlertDialogProps, ref: DOMRef) {\n  let {\n    onClose = () => {}\n  } = useContext(DialogContext) || {} as DialogContextValue;\n\n  let {\n    variant,\n    children,\n    primaryActionLabel,\n    secondaryActionLabel,\n    cancelLabel,\n    autoFocusButton,\n    title,\n    isPrimaryActionDisabled,\n    isSecondaryActionDisabled,\n    onCancel = () => {},\n    onPrimaryAction = () => {},\n    onSecondaryAction = () => {},\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/dialog');\n\n  let confirmVariant: SpectrumButtonProps['variant'] = 'primary';\n  if (variant) {\n    if (variant === 'confirmation') {\n      confirmVariant = 'cta';\n    } else if (variant === 'destructive') {\n      confirmVariant = 'negative';\n    }\n  }\n\n  return (\n    <Dialog\n      UNSAFE_style={styleProps.style}\n      UNSAFE_className={classNames(styles, {[`spectrum-Dialog--${variant}`]: variant}, styleProps.className)}\n      isHidden={styleProps.hidden}\n      size=\"M\"\n      role=\"alertdialog\"\n      ref={ref}>\n      <Heading>{title}</Heading>\n      {(variant === 'error' || variant === 'warning') &&\n        <AlertMedium\n          slot=\"typeIcon\"\n          aria-label={stringFormatter.format('alert')} />\n      }\n      <Divider />\n      <Content>{children}</Content>\n      <ButtonGroup align=\"end\">\n        {cancelLabel &&\n          <Button\n            variant=\"secondary\"\n            onPress={() => chain(onClose(), onCancel())}\n            autoFocus={autoFocusButton === 'cancel'}>\n            {cancelLabel}\n          </Button>\n        }\n        {secondaryActionLabel &&\n          <Button\n            variant=\"secondary\"\n            onPress={() => chain(onClose(), onSecondaryAction())}\n            isDisabled={isSecondaryActionDisabled}\n            autoFocus={autoFocusButton === 'secondary'}>\n            {secondaryActionLabel}\n          </Button>\n        }\n        <Button\n          variant={confirmVariant}\n          onPress={() => chain(onClose(), onPrimaryAction())}\n          isDisabled={isPrimaryActionDisabled}\n          autoFocus={autoFocusButton === 'primary'}>\n          {primaryActionLabel}\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  );\n}\n\n/**\n * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.\n */\nlet _AlertDialog = forwardRef(AlertDialog);\nexport {_AlertDialog as AlertDialog};\n"],"names":[],"version":3,"file":"AlertDialog.module.js.map"}