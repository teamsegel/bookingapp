{"mappings":";;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;AAgCM,SAAS,0CAAc,KAA0B,EAAE,KAAsB,EAAE,GAA+B;IAC/G,IAAI,cACF,UAAU,EACX,GAAG;IACJ,IAAI,YAAY,CAAA,GAAA,2BAAI;IACpB,IAAI,YAAY,CAAA,GAAA,2BAAI;IACpB,IAAI,eAAe,MAAM,UAAU,KAAK;IACxC,IAAI,QAAQ,CAAA,GAAA,4BAAO;IACnB,IAAI,sBAAsB,CAAC,SAAS,mBAAmB,SAAS,IAAI;IAEpE,0DAA0D;IAC1D,CAAA,GAAA,8BAAO,EAAE,KAAK,eAAe,uBAAuB,CAAC,eAAe,IAAM,MAAM,MAAM,KAAK;IAE3F,CAAA,GAAA,sBAAQ,EAAE;QACR,0FAA0F;QAC1F,IAAI,wBAAuB,gBAAA,0BAAA,IAAK,OAAO,KAAI,CAAC,gBAAgB,CAAC;YAC3D,IAAI,MAAM,UAAU,EAClB,IAAI,OAAO,CAAC,eAAe,CAAC;iBAE5B,IAAI,OAAO,CAAC,YAAY,CAAC,UAAU;;IAGzC,GAAG;QAAC;QAAc;QAAK,MAAM,UAAU;QAAE;QAAO;QAAqB;KAAW;IAEhF,OAAO;QACL,aAAa;YACX,IAAI;YACJ,iBAAiB,MAAM,UAAU;YACjC,iBAAiB;YACjB,SAAS,CAAC;gBACR,IAAI,CAAC,cAAc,EAAE,WAAW,KAAK,YACnC,MAAM,MAAM;YAEhB;wBACA;YACA,WAAU,CAAC;gBACT,IAAI,CAAC,cAAe,CAAA,EAAE,GAAG,KAAK,WAAW,EAAE,GAAG,KAAK,GAAE,GAAI;oBACvD,EAAE,cAAc;oBAChB,MAAM,MAAM;gBACd;YACF;QACF;QACA,YAAY;YACV,IAAI;YACJ,qDAAqD;YACrD,MAAM;YACN,mBAAmB;YACnB,QAAQ,AAAC,CAAC,uBAAuB,eAAgB,CAAC,MAAM,UAAU,GAAG;QACvE;IACF;AACF","sources":["packages/@react-aria/disclosure/src/useDisclosure.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {DisclosureState} from '@react-stately/disclosure';\nimport {HTMLAttributes, RefObject, useEffect} from 'react';\nimport {useEvent, useId} from '@react-aria/utils';\nimport {useIsSSR} from '@react-aria/ssr';\n\nexport interface AriaDisclosureProps {\n  /** Whether the disclosure is disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the disclosure's expanded state changes. */\n  onExpandedChange?: (isExpanded: boolean) => void,\n  /** Whether the disclosure is expanded (controlled). */\n  isExpanded?: boolean,\n  /** Whether the disclosure is expanded by default (uncontrolled). */\n  defaultExpanded?: boolean\n}\n\nexport interface DisclosureAria {\n  /** Props for the disclosure button. */\n  buttonProps: AriaButtonProps,\n  /** Props for the disclosure panel. */\n  panelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a disclosure component.\n * @param props - Props for the disclosure.\n * @param state - State for the disclosure, as returned by `useDisclosureState`.\n * @param ref - A ref for the disclosure content.\n */\nexport function useDisclosure(props: AriaDisclosureProps, state: DisclosureState, ref?: RefObject<Element | null>): DisclosureAria {\n  let {\n    isDisabled\n  } = props;\n  let triggerId = useId();\n  let contentId = useId();\n  let isControlled = props.isExpanded !== undefined;\n  let isSSR = useIsSSR();\n  let supportsBeforeMatch = !isSSR && 'onbeforematch' in document.body;\n\n  // @ts-ignore https://github.com/facebook/react/pull/24741\n  useEvent(ref, 'beforematch', supportsBeforeMatch && !isControlled ? () => state.expand() : null);\n\n  useEffect(() => {\n    // Until React supports hidden=\"until-found\": https://github.com/facebook/react/pull/24741\n    if (supportsBeforeMatch && ref?.current && !isControlled && !isDisabled) {\n      if (state.isExpanded) {\n        ref.current.removeAttribute('hidden');\n      } else {\n        ref.current.setAttribute('hidden', 'until-found');\n      }\n    }\n  }, [isControlled, ref, props.isExpanded, state, supportsBeforeMatch, isDisabled]);\n\n  return {\n    buttonProps: {\n      id: triggerId,\n      'aria-expanded': state.isExpanded,\n      'aria-controls': contentId,\n      onPress: (e) => {\n        if (!isDisabled && e.pointerType !== 'keyboard') {\n          state.toggle();\n        }\n      },\n      isDisabled,\n      onKeyDown(e) {\n        if (!isDisabled && (e.key === 'Enter' || e.key === ' ')) {\n          e.preventDefault();\n          state.toggle();\n        }\n      }\n    },\n    panelProps: {\n      id: contentId,\n      // This can be overridden at the panel element level.\n      role: 'group',\n      'aria-labelledby': triggerId,\n      hidden: (!supportsBeforeMatch || isControlled) ? !state.isExpanded : true\n    }\n  };\n}\n"],"names":[],"version":3,"file":"useDisclosure.main.js.map"}